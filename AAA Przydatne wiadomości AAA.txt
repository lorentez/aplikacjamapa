Tutaj umieszcza³ i aktualizowa³ bêdê ciekawe informacja, na które uda³o mi siê natrafiæ. Proszê o zapoznanie siê z nimi.

W naszym projekcie bêdziemy musieli spojrzeæ na mapê, jak na graf, który sk³ada siê z wêz³ów i krawêdzi, gdzie ka¿da z nich ma swoja wagê, w naszym przypadku d³ugoœæ. Ka¿de skrzy¿owanie dwóch, lub wiêcej krawêdzi(dróg), bêdzie wêz³em. Po "wyprostowaniu" ulic i skrzy¿owañ bêdziemy mieli gotowy graf na którym mog¹ pracowaæ podane w innych plikach algprytmy.

Problem komiwoja¿era:
https://pl.wikipedia.org/wiki/Problem_komiwoja%C5%BCera

Mo¿e to byæ przydatne przy takich funkcjonalnoœciach naszego programu, jak szukanie trasy dojazdu przez jeden, lub kilka punktów poœrednich. Opisuje on, jak najszybciej/najtaniej dostaæ siê z miejsca do miejsca odwiedzaj¹c zadane miasta, zaczynaj¹c i koñcz¹c w danym miejscu. Czyli idealnie to, czego potrzebujemy.

Problem marszrutyzacji:
https://pl.wikipedia.org/wiki/Problem_marszrutyzacji
Podobnie jak wy¿ej.

Raczej ma³o przydatny do naszych zastosowaæ, aczkolwiek mo¿e siê przydaæ. Jak dostaæ siê z A do B "zahaczaj¹c" po drodze WSZYSTKIE punkty:
https://www.quora.com/What-algorithm-could-I-use-to-determine-the-shortest-path-between-selected-points-on-a-map-if-all-points-need-to-be-visited

Od razu coœ w C++:
http://stackoverflow.com/questions/3447566/dijkstras-algorithm-in-c

SPFA - Shortest Path Faster Algorithm:
https://www.quora.com/What-is-the-estimated-complexity-of-SPFA-Shortest-Path-Faster-Algorithm#

Algorytm Johnsona:
https://www.quora.com/How-does-Johnsons-algorithm-shortest-path-in-a-graph-with-negative-weights-and-cycles-work

Shortest Path in Directed Acyclic Graph:
https://www.quora.com/What-is-the-reason-why-the-algorithm-for-computing-shortest-paths-on-DAGs-is-correct-aka-DAG-SP-DAG-shortest-Paths

I jeszcze trochê wiêcej DAG:
http://www.geeksforgeeks.org/shortest-path-for-directed-acyclic-graphs/

U³atwiaj¹ce zrozumienie problemu opisy:
https://pl.wikipedia.org/wiki/Problem_najkr%C3%B3tszej_%C5%9Bcie%C5%BCki

https://en.wikipedia.org/wiki/Shortest_Path_Faster_Algorithm



